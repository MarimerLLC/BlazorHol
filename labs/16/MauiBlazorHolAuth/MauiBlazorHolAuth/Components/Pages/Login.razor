@page "/login"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Login</h3>

<p class="alert-danger">@ErrorMessage</p>

<EditForm Model="@credentials" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="credentials.Username" />
        <ValidationMessage For="@(() => credentials.Username)" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" @bind-Value="credentials.Password" />
        <ValidationMessage For="@(() => credentials.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>


@code
{
    private Credentials credentials = new Credentials();
    private string? ErrorMessage { get; set; }

    private async Task HandleValidSubmit()
    {
        var httpClient = new HttpClient();
        var response = await httpClient.PostAsJsonAsync("https://localhost:7003/auth", credentials);
        var user = await response.Content.ReadFromJsonAsync<User>();
        if (user != null && !string.IsNullOrEmpty(user.Username))
        {
            var claims = new List<System.Security.Claims.Claim>();
            foreach (var claim in user.Claims)
            {
                claims.Add(new System.Security.Claims.Claim(claim.Type, claim.Value));
            }
            var identity = new ClaimsIdentity(claims, "auth_api");
            var principal = new ClaimsPrincipal(identity);
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).SetPrincipal(principal);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ErrorMessage = "Invalid credentials";
        }
    }

    private class Credentials
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
    }

    private class User
    {
        public string Username { get; set; } = string.Empty;
        public List<Claim> Claims { get; set; } = [];
    }

    private class Claim
    {
        public string Type { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
    }
}