@page "/clientweather"
@using System.Text.Json
@using System.Net.Http.Headers
@using Marimer.Blazor.RenderMode
@rendermode InteractiveWebAssembly
@implements IDisposable

@inject PersistentComponentState ApplicationState
@inject RenderModeProvider RenderModeProvider

<PageTitle>Client Weather</PageTitle>

<h3>Client Weather</h3>

<div class="text-info">@RenderModeProvider.GetRenderMode(this)</div>

<p>This component demonstrates showing data.</p>

@if (forecasts == null || renderMode.IsServer())
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private PersistingComponentStateSubscription _subscription;
    private Marimer.Blazor.RenderMode.RenderMode renderMode;

    protected override async Task OnInitializedAsync()
    {
        renderMode = RenderModeProvider.GetRenderMode(this);
        if (renderMode.IsInteractive())
        {
            var httpClient = new HttpClient();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "MyBearerTokenValue");
            forecasts = await httpClient.GetFromJsonAsync<WeatherForecast[]>("https://localhost:7285/weatherforecast");
        }


        // _subscription = ApplicationState.RegisterOnPersisting(Persist);

        // var foundInState = ApplicationState
        //     .TryTakeFromJson<WeatherForecast[]>("forecasts", out forecasts);

        // if (!foundInState)
        // {
        //     var httpClient = new HttpClient();
        //     httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "MyBearerTokenValue");
        //     forecasts = await httpClient.GetFromJsonAsync<WeatherForecast[]>("https://localhost:7285/weatherforecast");
        // }
    }

    private Task Persist()
    {
        ApplicationState.PersistAsJson("forecasts", forecasts);
        return Task.CompletedTask;
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    public void Dispose()
    {
        _subscription.Dispose();
    }
}
